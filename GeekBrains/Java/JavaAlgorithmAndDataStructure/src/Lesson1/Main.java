package Lesson1;

public class Main {

    public static void main(String[] args) {
	// write your code here
       /* Задание 1.1
            Приведите пример алгоритмов и структур данных из жизни.
                В многокартирных домах номера квартир представлены в виде линейного списка.
                Допустим в нашем доме 4 подъезда.
                Поиск нужной квартиры может осуществляться методом простого перебора,
                пока не будет найдена нужная квартира.

                Так же можно использовать бинарный поиск, начиная поиск с 3-го подъезда.
                Если искомая квартира меньше, чем первая квартира в 3 подъезде, то искать нужно в первых двух,
                тогда продолжаем с 1-й квартиры 2 подъезда, и т.д.

                Конкретный адрес квартиры - представляет собой иерархическую структуру данных:
                2 подъезд 5 этаж квартира 57.

        Задание 1.2
        Приведите пример алгоритмов и структур данных в программировании.

        Структурами данных в программировании являются например примитивные и ссылочные типы данных.
        Примером алгоритма является поиск минимального элемента в массиве.

        Задание 1.3
        Напишите программный код, в котором все данные хранятся только в переменных трех типов данных:
        Ссылочные, примитивные и своего класса содержащего: конструктор и метод отображения данных.
                Выведите написанные данные.*/
        String linkData = "link";
        int simpleData = 12345;
        MyClass myObject = new MyClass();
        System.out.println("Reference data type: " + linkData);
        System.out.println("Primitive data type: " + simpleData);
        myObject.print();
        /*
        Задание 1.4
        Дополните предыдущий код сравнением ваших данных с другой переменной, данный код должен имитировать простейший поиск перебором.
        Оцените время выполнения алгоритма с помощью базового метода System.nanoTime().*/
        MyClass[] array = new MyClass[100];
        for (int i = 0; i < 100; i++) {
            array[i] = new MyClass();
        }
        myObject.equals(array);
    }
}
